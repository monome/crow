// THIS FILE IS AUTOGENERATED //
// DO NOT EDIT THIS MANUALLY //

#pragma once

typedef enum{ II_void
            , II_u8
            , II_s8
            , II_u16
            , II_s16
            , II_float   // 32bit (for crow to crow comm'n)
} II_Type_t;

typedef struct{
    uint8_t cmd;
    uint8_t args;
    uint8_t return_type;
    II_Type_t argtype[];
} II_Cmd_t;

const char* ii_module_list =
"--- ii: supported modules\n\r"
"jf\t-- just friends\n\r"
"wslash\t-- W/\n\r"
"\n\r"
"--- See a module's commands with 'ii.<module>.help()'\n\r"
"ii.jf.help()\n\r"
;
const II_Cmd_t jf0 = {1,2,II_void,{II_s8,II_s8}};
const II_Cmd_t jf1 = {2,1,II_void,{II_s8}};
const II_Cmd_t jf2 = {3,1,II_void,{II_s16}};
const II_Cmd_t jf3 = {4,1,II_void,{II_s16}};
const II_Cmd_t jf4 = {5,2,II_void,{II_s8,II_s16}};
const II_Cmd_t jf5 = {6,3,II_void,{II_s8,II_s16,II_s16}};
const II_Cmd_t jf6 = {7,1,II_void,{II_s8}};
const II_Cmd_t jf7 = {8,3,II_void,{II_s8,II_s16,II_s16}};
const II_Cmd_t jf8 = {9,2,II_void,{II_s16,II_s16}};
const II_Cmd_t jf9 = {10,1,II_void,{II_s8}};
const II_Cmd_t jf10 = {11,1,II_void,{II_s8}};
const II_Cmd_t jf11 = {12,1,II_void,{II_s8}};
const II_Cmd_t jf12 = {130,0,II_s8,{}};
const II_Cmd_t jf13 = {131,0,II_s16,{}};
const II_Cmd_t jf14 = {132,0,II_s16,{}};
const II_Cmd_t jf15 = {135,0,II_s8,{}};
const II_Cmd_t jf16 = {138,0,II_s8,{}};
const II_Cmd_t jf17 = {139,0,II_s8,{}};
const II_Cmd_t jf18 = {140,0,II_s8,{}};
const II_Cmd_t jf19 = {134,1,II_s8,{II_s8}};
const II_Cmd_t wslash0 = {1,1,II_void,{II_s8}};
const II_Cmd_t wslash1 = {2,1,II_void,{II_s8}};
const II_Cmd_t wslash2 = {3,1,II_void,{II_s8}};
const II_Cmd_t wslash3 = {4,1,II_void,{II_s8}};
const II_Cmd_t wslash4 = {129,0,II_s8,{}};
const II_Cmd_t wslash5 = {130,0,II_s8,{}};
const II_Cmd_t wslash6 = {131,0,II_s8,{}};
const II_Cmd_t wslash7 = {132,0,II_s8,{}};
const II_Cmd_t* ii_find_command( uint8_t address, uint8_t cmd ){
	switch( address  ){
		case 112:
			switch( cmd ){
				case 1: return &jf0;
				case 2: return &jf1;
				case 3: return &jf2;
				case 4: return &jf3;
				case 5: return &jf4;
				case 6: return &jf5;
				case 7: return &jf6;
				case 8: return &jf7;
				case 9: return &jf8;
				case 10: return &jf9;
				case 11: return &jf10;
				case 12: return &jf11;
				case 130: return &jf12;
				case 131: return &jf13;
				case 132: return &jf14;
				case 135: return &jf15;
				case 138: return &jf16;
				case 139: return &jf17;
				case 140: return &jf18;
				case 134: return &jf19;
				default: return NULL; // unknown command
			}
		case 113:
			switch( cmd ){
				case 1: return &wslash0;
				case 2: return &wslash1;
				case 3: return &wslash2;
				case 4: return &wslash3;
				case 129: return &wslash4;
				case 130: return &wslash5;
				case 131: return &wslash6;
				case 132: return &wslash7;
				default: return NULL; // unknown command
			}
		default: return NULL; // unknown address
	}
}
const char* jf_help=
"-- commands\n\r"
"ii.jf.trigger( channel, state )\n\r"
"ii.jf.run_mode( mode )\n\r"
"ii.jf.run( volts )\n\r"
"ii.jf.transpose( pitch )\n\r"
"ii.jf.vtrigger( channel, level )\n\r"
"ii.jf.retune( channel, numerator, denominator )\n\r"
"ii.jf.mode( mode )\n\r"
"ii.jf.play_voice( channel, pitch/divs, level/repeats )\n\r"
"ii.jf.play_note( pitch/divs, level/repeats )\n\r"
"ii.jf.god_mode( state )\n\r"
"ii.jf.tick( clock-or-bpm )\n\r"
"ii.jf.quantize( divisions )\n\r"
"\n\r"
"-- request params\n\r"
"ii.jf.get( 'run_mode' )\n\r"
"ii.jf.get( 'run' )\n\r"
"ii.jf.get( 'transpose' )\n\r"
"ii.jf.get( 'mode' )\n\r"
"ii.jf.get( 'god_mode' )\n\r"
"ii.jf.get( 'tick' )\n\r"
"ii.jf.get( 'quantize' )\n\r"
"ii.jf.get( 'retune', channel )\n\r"
"\n\r"
"-- then receive\n\r"
"ii.jf.event = function( e, data )\n\r"
"	if e == 'run_mode' then\n\r"
"		-- handle run_mode param here\n\r"
"	elseif e == 'run' then\n\r"
"	elseif e == 'transpose' then\n\r"
"	elseif e == 'mode' then\n\r"
"	elseif e == 'god_mode' then\n\r"
"	elseif e == 'tick' then\n\r"
"	elseif e == 'quantize' then\n\r"
"	elseif e == 'retune' then\n\r"
"	end\n\r"
"end\n\r"
;
const char* wslash_help=
"-- commands\n\r"
"ii.wslash.record( active )\n\r"
"ii.wslash.play( direction )\n\r"
"ii.wslash.loop( state )\n\r"
"ii.wslash.cue( destination )\n\r"
"\n\r"
"-- request params\n\r"
"ii.wslash.get( 'record' )\n\r"
"ii.wslash.get( 'play' )\n\r"
"ii.wslash.get( 'loop' )\n\r"
"ii.wslash.get( 'cue' )\n\r"
"\n\r"
"-- then receive\n\r"
"ii.wslash.event = function( e, data )\n\r"
"	if e == 'record' then\n\r"
"		-- handle record param here\n\r"
"	elseif e == 'play' then\n\r"
"	elseif e == 'loop' then\n\r"
"	elseif e == 'cue' then\n\r"
"	end\n\r"
"end\n\r"
;
const char* ii_list_commands( uint8_t address )
{
	switch( address  ){
		case 112: return jf_help;
		case 113: return wslash_help;
		default: return "module not found\n\r";
	}
}
